#NOTES DE COURS



#Unique lock et lock guard


{
  std::mutex m,
  std::lock_guard<std::mutex> lockGuard(m);
  sharedVariable= getVar();
}
 

That was easy. But what's about the opening and closing brackets? 
The lifetime of std::lock_guard is limited by the brackets (http://en.cppreference.com/w/cpp/language/scope#Block_scope). 
That means, its lifetime ends when it leaves the critical section. Exactly at that time point, 
the destructor of std::lock_guard is called, and - I guess, you know it - the mutex is released. 
It happens automatically, and, in addition, it  happens if  getVar() in sharedVariable = getVar() throws an exception. 
Of course, function body scope or loop scope also limit the lifetime of an object.

std::unique_lock
std::unique_lock is mightier but more expansive than its small brother std::lock_guard.

A std::unique_lock enables youin addition to std::lock_guard

create it without an associated mutex
create it without a locked associated mutex
explicitly and repeatedly set or release the lock of the associated mutex
move the mutex
try to lock the mutex
delayed lock the associated mutex